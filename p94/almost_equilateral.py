# almost_equilateral.py
# Find all triangles w integer sides such that 2 sides are the same
# and one differs by one unit where the area is an integer as well

import time, sys

# All solutions of the form s, s, s+1 can be derived from solving
# the Pell's Equation for d = 3
def pell_solutions (d, init_x, init_y, max_perimeter):
    perim_sum = 0
    x0, y0 = init_x, init_y
    s = x0 ** 2 + y0 ** 2
    perim = s + s + (s + 1)
    xn, yn = x0, y0

    while perim < max_perimeter:
        perim_sum += perim
        x_next = x0 * xn + d * y0 * yn
        y_next = y0 * xn + x0 * yn
        s = x_next ** 2 + y_next ** 2
        perim = 3 * s + 1
        xn, yn = x_next, y_next

    return perim_sum

# The triangles of form s, s, s-1 can be generated by finding the
# squares x ** 2 such that (x ** 2 + 8) / 3 is also square

def greater_side_solutions (max_perimeter):
    k = 8
    diff = 2
    diff_marker = 6
    
    perim_sum = 0
    square_range = [x * x for x in range(1, int((2 * max_perimeter)**0.5)+1)]
    oth_range = map (lambda x: (x + 8)/3, square_range)
    test_set = set(square_range).intersection(set(oth_range))
    test_list = list(test_set)
    test_list.remove(4) # happen to know that this will appear in the set
                        # but it corresponds to a non-triangle
    return sum(map(lambda x: (3 * x - 8)/2, test_list))

def main():
    start_time = time.time()
    d = 3
    init_x, init_y = 2, 1
    max_perimeter = 10 ** 9
    perim_sum = pell_solutions (d, init_x, init_y, max_perimeter)
    perim_sum += greater_side_solutions (max_perimeter)
    print perim_sum, time.time() - start_time
main()
